//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileUploadDemoClient.FileUploadService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlobFileInfo", Namespace="http://schemas.datacontract.org/2004/07/FileUploadDemoServer")]
    [System.SerializableAttribute()]
    public partial class BlobFileInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid BlobFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid BlobFileId {
            get {
                return this.BlobFileIdField;
            }
            set {
                if ((this.BlobFileIdField.Equals(value) != true)) {
                    this.BlobFileIdField = value;
                    this.RaisePropertyChanged("BlobFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatedByField, value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedOn {
            get {
                return this.CreatedOnField;
            }
            set {
                if ((this.CreatedOnField.Equals(value) != true)) {
                    this.CreatedOnField = value;
                    this.RaisePropertyChanged("CreatedOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Size {
            get {
                return this.SizeField;
            }
            set {
                if ((this.SizeField.Equals(value) != true)) {
                    this.SizeField = value;
                    this.RaisePropertyChanged("Size");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileUploadService.IFileUploadService")]
    public interface IFileUploadService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/CreateBlobFile", ReplyAction="http://tempuri.org/IFileUploadService/CreateBlobFileResponse")]
        System.Guid CreateBlobFile(string name, string description, long size, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/CreateBlobFile", ReplyAction="http://tempuri.org/IFileUploadService/CreateBlobFileResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateBlobFileAsync(string name, string description, long size, string createdBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/AddBlobFileChunk", ReplyAction="http://tempuri.org/IFileUploadService/AddBlobFileChunkResponse")]
        void AddBlobFileChunk(System.Guid blobFileId, int chunkId, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/AddBlobFileChunk", ReplyAction="http://tempuri.org/IFileUploadService/AddBlobFileChunkResponse")]
        System.Threading.Tasks.Task AddBlobFileChunkAsync(System.Guid blobFileId, int chunkId, byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/DeleteBlobFile", ReplyAction="http://tempuri.org/IFileUploadService/DeleteBlobFileResponse")]
        void DeleteBlobFile(System.Guid blobFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/DeleteBlobFile", ReplyAction="http://tempuri.org/IFileUploadService/DeleteBlobFileResponse")]
        System.Threading.Tasks.Task DeleteBlobFileAsync(System.Guid blobFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/GetBlobFiles", ReplyAction="http://tempuri.org/IFileUploadService/GetBlobFilesResponse")]
        FileUploadDemoClient.FileUploadService.BlobFileInfo[] GetBlobFiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/GetBlobFiles", ReplyAction="http://tempuri.org/IFileUploadService/GetBlobFilesResponse")]
        System.Threading.Tasks.Task<FileUploadDemoClient.FileUploadService.BlobFileInfo[]> GetBlobFilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/ProcessFile", ReplyAction="http://tempuri.org/IFileUploadService/ProcessFileResponse")]
        string ProcessFile(System.Guid blobFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/ProcessFile", ReplyAction="http://tempuri.org/IFileUploadService/ProcessFileResponse")]
        System.Threading.Tasks.Task<string> ProcessFileAsync(System.Guid blobFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/SaveFileAs", ReplyAction="http://tempuri.org/IFileUploadService/SaveFileAsResponse")]
        void SaveFileAs(System.Guid blobFileId, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileUploadService/SaveFileAs", ReplyAction="http://tempuri.org/IFileUploadService/SaveFileAsResponse")]
        System.Threading.Tasks.Task SaveFileAsAsync(System.Guid blobFileId, string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileUploadServiceChannel : FileUploadDemoClient.FileUploadService.IFileUploadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileUploadServiceClient : System.ServiceModel.ClientBase<FileUploadDemoClient.FileUploadService.IFileUploadService>, FileUploadDemoClient.FileUploadService.IFileUploadService {
        
        public FileUploadServiceClient() {
        }
        
        public FileUploadServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileUploadServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileUploadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid CreateBlobFile(string name, string description, long size, string createdBy) {
            return base.Channel.CreateBlobFile(name, description, size, createdBy);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateBlobFileAsync(string name, string description, long size, string createdBy) {
            return base.Channel.CreateBlobFileAsync(name, description, size, createdBy);
        }
        
        public void AddBlobFileChunk(System.Guid blobFileId, int chunkId, byte[] data) {
            base.Channel.AddBlobFileChunk(blobFileId, chunkId, data);
        }
        
        public System.Threading.Tasks.Task AddBlobFileChunkAsync(System.Guid blobFileId, int chunkId, byte[] data) {
            return base.Channel.AddBlobFileChunkAsync(blobFileId, chunkId, data);
        }
        
        public void DeleteBlobFile(System.Guid blobFileId) {
            base.Channel.DeleteBlobFile(blobFileId);
        }
        
        public System.Threading.Tasks.Task DeleteBlobFileAsync(System.Guid blobFileId) {
            return base.Channel.DeleteBlobFileAsync(blobFileId);
        }
        
        public FileUploadDemoClient.FileUploadService.BlobFileInfo[] GetBlobFiles() {
            return base.Channel.GetBlobFiles();
        }
        
        public System.Threading.Tasks.Task<FileUploadDemoClient.FileUploadService.BlobFileInfo[]> GetBlobFilesAsync() {
            return base.Channel.GetBlobFilesAsync();
        }
        
        public string ProcessFile(System.Guid blobFileId) {
            return base.Channel.ProcessFile(blobFileId);
        }
        
        public System.Threading.Tasks.Task<string> ProcessFileAsync(System.Guid blobFileId) {
            return base.Channel.ProcessFileAsync(blobFileId);
        }
        
        public void SaveFileAs(System.Guid blobFileId, string fileName) {
            base.Channel.SaveFileAs(blobFileId, fileName);
        }
        
        public System.Threading.Tasks.Task SaveFileAsAsync(System.Guid blobFileId, string fileName) {
            return base.Channel.SaveFileAsAsync(blobFileId, fileName);
        }
    }
}
